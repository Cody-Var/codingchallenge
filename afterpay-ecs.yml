---
AWSTemplateFormatVersion: 2010-09-09
Parameters:
  VPC:
    Type: String
    Description: The vpc to launch the service
    Default: vpc-02ae5664

  PublicSubnet1:
    Type: String
    Description: The subnet where to launch the service
    Default: subnet-7d01d335

  PublicSubnet2:
    Type: String
    Description: the subnet where to Launch the service
    Default: subnet-86ed4de0

Resources:            
  ALBSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "security group for ALB"
      VpcId: !Ref VPC
      SecurityGroupIngress: 
        - 
          CidrIp: "0.0.0.0/0"
          FromPort: 80
          IpProtocol: "tcp"
          ToPort: 80
    
  ApplicationLoadBalancer:
    Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
    Properties:
      Name: "afterpay-loadBalancer"
      Scheme: "internet-facing"
      Type: "application"
      Subnets: 
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups: 
        - !Ref ALBSecurityGroup
      IpAddressType: "ipv4"
      LoadBalancerAttributes: 
        - 
          Key: "access_logs.s3.enabled"
          Value: "false"
        - 
          Key: "idle_timeout.timeout_seconds"
          Value: "60"
        - 
          Key: "deletion_protection.enabled"
          Value: "false"
        - 
          Key: "routing.http2.enabled"
          Value: "true"
        - 
          Key: "routing.http.drop_invalid_header_fields.enabled"
          Value: "false"

  HTTPListener:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: "HTTP"
      DefaultActions: 
        - Type: forward
          ForwardConfig:
            TargetGroups:
              - TargetGroupArn: !Ref TestTargetGroup
                Weight: 1
                
  TestTargetGroup:
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: "/"
      Port: 80
      Protocol: "HTTP"
      HealthCheckPort: "traffic-port"
      HealthCheckProtocol: "HTTP"
      HealthCheckTimeoutSeconds: 5
      UnhealthyThresholdCount: 2
      TargetType: "ip"
      Matcher: 
          HttpCode: "200"
      HealthyThresholdCount: 5
      VpcId: !Ref VPC
      Name: "afterpay-target-group"
      HealthCheckEnabled: true
      TargetGroupAttributes: 
        - 
          Key: "stickiness.enabled"
          Value: "false"
        - 
          Key: "deregistration_delay.timeout_seconds"
          Value: "300"
        - 
          Key: "stickiness.type"
          Value: "lb_cookie"
        - 
          Key: "stickiness.lb_cookie.duration_seconds"
          Value: "86400"
        - 
          Key: "slow_start.duration_seconds"
          Value: "0"
        - 
          Key: "load_balancing.algorithm.type"
          Value: "round_robin"
  Cluster:
    Type: 'AWS::ECS::Cluster'
    Properties:
      ClusterName: deployment-afterpay-cluster
  LogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: deployment-afterpay-log-group
  ExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: deployment-afterpay-role
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy'
  ContainerSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupName: ContainerSecurityGroup
      GroupDescription: Security group for afterpay app 
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0 # This is just for testing, has to change it for real world app
  TaskDefinition:
      Type: 'AWS::ECS::TaskDefinition'
      Properties:
        Family: deployment-afterpay-task
        Cpu: 256
        Memory: 512
        NetworkMode: awsvpc
        ExecutionRoleArn: !Ref ExecutionRole
        ContainerDefinitions:
          - Name: deployment-afterpay-container
            Image: '127077682219.dkr.ecr.ap-southeast-2.amazonaws.com/afterpay-test:latest' # Docker image stored in ECR, need to update as per AWS account
            PortMappings:
              - ContainerPort: 80
            LogConfiguration:
              LogDriver: awslogs
              Options:
                awslogs-region: !Ref 'AWS::Region'
                awslogs-group: !Ref LogGroup
                awslogs-stream-prefix: ecs
        RequiresCompatibilities:
          - EC2
          - FARGATE
  Service:
      Type: 'AWS::ECS::Service'
      DependsOn: HTTPListener 
      Properties:
        ServiceName: deployment-afterpay-service
        Cluster: !Ref Cluster
        TaskDefinition: !Ref TaskDefinition
        DesiredCount: 1
        LaunchType: FARGATE
        LoadBalancers:
          - TargetGroupArn:
              Ref: TestTargetGroup
            ContainerPort: 80
            ContainerName: deployment-afterpay-container
        NetworkConfiguration:
          AwsvpcConfiguration:
            AssignPublicIp: ENABLED
            Subnets:
              - !Ref PublicSubnet1
              - !Ref PublicSubnet2
            SecurityGroups:
              - !GetAtt 
                - ContainerSecurityGroup
                - GroupId

Outputs:        
  ApplicationURL: 
    Value: !GetAtt ApplicationLoadBalancer.DNSName